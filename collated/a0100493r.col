//@author: a0100493r



	/**
	 * origin: F:\My Documents\DoorNot\main\src\doornot\storage\DonStorage.java
	 */

public class DonStorage implements IDonStorage {

	private static String FILE_NAME = "DoorNot_current.txt";
	private static final int POSITION_OF_TASK_TITLE = 0;
	private static final int POSITION_OF_TASK_START_DATE = 1;
	private static final int POSITION_OF_TASK_END_DATE = 2;
	private static final int POSITION_OF_TASK_STATUS = 3;
	private static final int POSITION_OF_TASK_ID = 4;
	private static final int POSITION_OF_TASK_TIMEUSAGE = 5;
	private static final int POSITION_OF_TASK_LABELS = 6;
	private static final int MIN_OF_TASK_ID = 1;

	protected List<IDonTask> tasks = new ArrayList<IDonTask>();

	@Override
	public int addTask(IDonTask task) {
		tasks.add(task);
		return task.getID();
	}

	// This function used only for testing
	public void clear() {
		tasks.clear();
		saveToDisk();
	}

	@Override
	public boolean removeTask(int ID) {
		int taskIndex = searchTask(ID);
		if (taskIndex != -1) {
			tasks.remove(taskIndex);
			return true;
		} else
			return false;
	}

	@Override
	public int getNextID() {
		if (tasks.isEmpty()) {
			return MIN_OF_TASK_ID;
		} else {
			int[] IDArray = constructIDArray();
			for (int i = 1; i < IDArray.length; i++) {
				if (IDArray[i] == 0) {
					return i;
				}
			}
			return IDArray.length;
		}
	}

	// Creates an array of int that represents the tasks` ID usage
	private int[] constructIDArray() {
		int maxID = findMaxID();
		int IDArray[] = new int[maxID + 1];
		for (int i = 0; i < tasks.size(); i++) {
			IDArray[tasks.get(i).getID()] = 1;
		}
		return IDArray;
	}

	private int findMaxID() {
		int max = 0;
		for (int i = 0; i < tasks.size(); i++) {
			if (tasks.get(i).getID() > max) {
				max = tasks.get(i).getID();
			}
		}
		return max;
	}

	@Override
	public IDonTask getTask(int ID) {
		int taskIndex = searchTask(ID);
		if (taskIndex != -1)
			return tasks.get(taskIndex);
		else
			return null;
	}

	@Override
	public List<IDonTask> getTaskByName(String name) {
		assert name != null;
		List<IDonTask> foundTasks = new ArrayList<IDonTask>();

		for (IDonTask task : tasks) {
			// Search for the given name/title without case sensitivity
			if (task.getTitle().toLowerCase().contains(name.toLowerCase())) {
				foundTasks.add(task);
			}
		}

		return foundTasks;
	}

	private int searchTask(int ID) {
		if (!tasks.isEmpty()) {
			for (int i = 0; i < tasks.size(); i++) {
				if (tasks.get(i).getID() == ID) {
					return i;
				}
			}
		}
		return -1;
	}

	@Override
	public boolean saveToDisk() {
		try {
			File file = new File(FILE_NAME);
			FileWriter myWriter = new FileWriter(file);
			if (!tasks.isEmpty()) {
				writeIntoFile(myWriter);
			}
			myWriter.close();
			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}

	private void writeIntoFile(FileWriter myWriter) throws IOException {
		SimpleDateFormat formatter = new SimpleDateFormat("ddMMyyyy_HHmm");
		for (int i = 0; i < tasks.size(); i++) {
			String taskInfo = constructSavingInfo(formatter, i);
			taskInfo = taskInfo + "\n";
			myWriter.write(taskInfo);
		}
	}

	private String constructSavingInfo(SimpleDateFormat formatter, int i) {
		String taskTitle, taskStartDate = "null", taskEndDate = "null";
		String taskStatus = "Undone";
		String taskTimeUsage = "False";
		int taskID = 0;
		List<String> taskLabels = new ArrayList<String>();

		taskTitle = tasks.get(i).getTitle();
		if (tasks.get(i).getStartDate() != null) {
			taskStartDate = formatter.format(tasks.get(i).getStartDate()
					.getTime());
		}
		if (tasks.get(i).getEndDate() != null) {
			taskEndDate = formatter.format(tasks.get(i).getEndDate().getTime());
		}
		if (tasks.get(i).getStatus() == true) {
			taskStatus = "Done";
		}
		taskID = tasks.get(i).getID();
		if (tasks.get(i).isTimeUsed()) {
			taskTimeUsage = "True";
		}
		if (!tasks.get(i).getLabels().isEmpty()) {
			taskLabels = tasks.get(i).getLabels();
		} else {
			taskLabels.add("null");
		}

		String taskInfo = taskTitle + ";" + taskStartDate + ";" + taskEndDate
				+ ";" + taskStatus + ";" + taskID + ";" + taskTimeUsage + ";";

		for (int j = 0; j < taskLabels.size(); j++) {
			taskInfo = taskInfo + taskLabels.get(j) + ";";
		}
		return taskInfo;
	}

	@Override
	public boolean loadFromDisk() {
		File textFile = new File(FILE_NAME);
		if (!textFile.exists()) {
			try {
				textFile.createNewFile();
				return true;
			} catch (IOException e) {
				return false;
			}
		} else {
			return readFile(textFile);
		}
	}

	// Only for testing
	public void changeFileName(String newFileName) {
		FILE_NAME = newFileName;
	}

	protected boolean readFile(File file) {
		try {
			BufferedReader myReader = new BufferedReader(new FileReader(file));
			String textLine = null;

			while ((textLine = myReader.readLine()) != null) {
				String[] taskInfo = textLine.split(";");
				List<String> taskLabels = new ArrayList<String>();
				IDonTask task = constructTask(taskInfo, taskLabels);
				tasks.add(task);
			}
			myReader.close();
			return true;
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		}
	}

	private IDonTask constructTask(String[] taskInfo, List<String> taskLabels) {

		IDonTask task;
		int taskID = Integer.parseInt(taskInfo[POSITION_OF_TASK_ID]);

		if (taskInfo[POSITION_OF_TASK_START_DATE].equalsIgnoreCase("null")) {
			task = new DonTask(taskInfo[POSITION_OF_TASK_TITLE], taskID);
		} else if (taskInfo[POSITION_OF_TASK_END_DATE].equalsIgnoreCase("null")) {
			Calendar deadline = convertToDate(taskInfo[POSITION_OF_TASK_START_DATE]);
			task = new DonTask(taskInfo[POSITION_OF_TASK_TITLE], deadline,
					taskID);
		} else {
			Calendar startDate = convertToDate(taskInfo[POSITION_OF_TASK_START_DATE]);
			Calendar endDate = convertToDate(taskInfo[POSITION_OF_TASK_END_DATE]);
			task = new DonTask(taskInfo[POSITION_OF_TASK_TITLE], startDate,
					endDate, taskID);
		}

		if (taskInfo[POSITION_OF_TASK_STATUS].equalsIgnoreCase("done")) {
			task.setStatus(true);
		}
		if (taskInfo[POSITION_OF_TASK_TIMEUSAGE].equalsIgnoreCase("True")) {
			task.setTimeUsed(true);
		}

		if (!taskInfo[POSITION_OF_TASK_LABELS].equalsIgnoreCase("null")) {
			for (int i = POSITION_OF_TASK_LABELS; i < taskInfo.length; i++) {
				taskLabels.add(taskInfo[i]);
			}
			task.setLabels(taskLabels);
		}
		return task;
	}

	private Calendar convertToDate(String date) {
		int day = Integer.parseInt(date.substring(0, 2));
		int month = Integer.parseInt(date.substring(2, 4)) - 1;
		int year = Integer.parseInt(date.substring(4, 8));
		int hour = Integer.parseInt(date.substring(9, 11));
		int min = Integer.parseInt(date.substring(11, 13));

		return new GregorianCalendar(year, month, day, hour, min);
	}

	@Override
	public List<IDonTask> getTaskList() {
		return tasks;
	}

}

	// End of segment: F:\My Documents\DoorNot\main\src\doornot\storage\DonStorage.java





	/**
	 * origin: F:\My Documents\DoorNot\main\src\doornot\storage\IDonStorage.java
	 */

public interface IDonStorage {

	/**
	 * Return ID of task
	 * 
	 * @return ID of added task
	 */
	public int addTask(IDonTask task);

	/**
	 * Return response
	 * 
	 * @return successful
	 */
	public boolean removeTask(int taskID);

	/**
	 * Return the next ID for task
	 * 
	 * @return ID
	 */
	public int getNextID();

	/**
	 * Return a Task
	 * 
	 * @return Task
	 */
	public IDonTask getTask(int ID);

	/**
	 * Find tasks with the given name
	 * 
	 * @param name
	 *            the name to search for
	 * @return the response containing the tasks
	 */
	public List<IDonTask> getTaskByName(String name);

	/**
	 * Return response
	 * 
	 * @return successful
	 */
	public boolean saveToDisk();

	/**
	 * Return response
	 * 
	 * @return successful
	 */
	public boolean loadFromDisk();

	/**
	 * Return list
	 * 
	 * @return List of Tasks
	 */
	public List<IDonTask> getTaskList();

}

	// End of segment: F:\My Documents\DoorNot\main\src\doornot\storage\IDonStorage.java





	/**
	 * origin: F:\My Documents\DoorNot\main\test\doornot\storage\DonStorageTester.java
	 */

public class DonStorageTester {

	@Test
	public void testLoad() {
		DonStorage storage = new DonStorage();
		assertEquals(null, true, storage.loadFromDisk());
	}

	@Test
	public void testAdd() {
		DonStorage storage = new DonStorage();
		storage.changeFileName("testFile1.txt");
		storage.clear();
		if (storage.loadFromDisk()) {
			int ID = 3;
			IDonTask task = new DonTask("something", ID);
			assertEquals(null, 3, storage.addTask(task));
		}
	}

	@Test
	public void testRemove() {
		DonStorage storage = new DonStorage();
		storage.changeFileName("testFile2.txt");
		storage.clear();
		if (storage.loadFromDisk()) {
			int ID = 3;
			assertEquals(null, false, storage.removeTask(ID));
			IDonTask task = new DonTask("something", ID);
			ID = storage.addTask(task);
			assertEquals(null, true, storage.removeTask(ID));
		}
	}

	@Test
	public void testGetNext() {
		DonStorage storage = new DonStorage();
		storage.changeFileName("testFile3.txt");
		storage.clear();
		if (storage.loadFromDisk()) {
			assertEquals(null, 1, storage.getNextID());
			int ID = 1;
			IDonTask task = new DonTask("something", ID);
			ID = storage.addTask(task);
			assertEquals(null, 2, storage.getNextID());
			storage.removeTask(ID);
			assertEquals(null, 1, storage.getNextID());
		}

	}

	@Test
	public void testGetTasks() {
		DonStorage storage = new DonStorage();
		storage.changeFileName("testFile4.txt");
		storage.clear();
		if (storage.loadFromDisk()) {
			List<IDonTask> tasks = new ArrayList<IDonTask>();

			List<IDonTask> tasksTemp = storage.getTaskList();
			int ID = storage.getNextID();
			IDonTask task = new DonTask("something", ID);
			storage.addTask(task);
			tasks.add(task);

			ID = storage.getNextID();
			task = new DonTask("anything", ID);
			storage.addTask(task);
			tasks.add(task);

			assertEquals(null, true, storage.removeTask(2));
			tasks.remove(1);

			tasksTemp = storage.getTaskList();

			assertEquals(null, true, tasksTemp.equals(tasks));
			storage.saveToDisk();
		}

	}

	@Test
	public void testSave() {
		DonStorage storage = new DonStorage();
		storage.changeFileName("testFile5.txt");
		storage.clear();
		if (storage.loadFromDisk()) {
			int ID = 1;
			IDonTask task = new DonTask("something", ID);
			storage.addTask(task);
			task = new DonTask("something", storage.getNextID());
			storage.addTask(task);
			task = new DonTask("something", storage.getNextID());
			storage.addTask(task);
			task = new DonTask("something", storage.getNextID());
			storage.addTask(task);
			assertEquals(null, true, storage.saveToDisk());
		}
	}

	@Test
	public void testLabelsSave() {
		DonStorage storage = new DonStorage();
		storage.changeFileName("testFile6.txt");
		storage.clear();
		if (storage.loadFromDisk()) {

			List<String> testLabels = new ArrayList<String>();
			testLabels.add("label1");
			testLabels.add("label2");
			testLabels.add("label3");
			IDonTask task = new DonTask("something", null, null,
					storage.getNextID(), testLabels);
			storage.addTask(task);
			testLabels.add("label4");
			testLabels.add("label5");
			testLabels.add("label6");
			task = new DonTask("something", null, null, storage.getNextID(),
					testLabels);
			storage.addTask(task);
			task = new DonTask("something", storage.getNextID());
			storage.addTask(task);
			task = new DonTask("something", storage.getNextID());
			storage.addTask(task);
			assertEquals(null, true, storage.saveToDisk());
		}
	}

	@Test
	public void testLabelsLoad() {
		DonStorage storage = new DonStorage();
		storage.changeFileName("testFile6.txt");
		if (storage.loadFromDisk()) {
			storage.changeFileName("testFile6_Compare.txt");
			storage.saveToDisk();
		}
	}

	@Test
	public void testAddDeleteLabel() {
		DonStorage storage = new DonStorage();
		DonStorage storage_output = new DonStorage();
		storage_output.changeFileName("testFile9_AddDeleteLabel.txt");
		storage_output.clear();
		storage.changeFileName("testFile9.txt");
		storage.clear();
		if (storage.loadFromDisk()) {

			List<String> testLabels = new ArrayList<String>();
			testLabels.add("label1");
			testLabels.add("label2");
			testLabels.add("label3");
			IDonTask task = new DonTask("something", null, null,
					storage.getNextID(), testLabels);
			storage.addTask(task);
			testLabels.add("label4");
			testLabels.add("label5");
			testLabels.add("label6");
			task = new DonTask("something", null, null, storage.getNextID(),
					testLabels);
			storage.addTask(task);
			task = new DonTask("something", storage.getNextID());
			storage.addTask(task);
			task = new DonTask("something", storage.getNextID());
			storage.addTask(task);
			assertEquals(null, true, storage.saveToDisk());
		}
		
		if (storage_output.loadFromDisk()) {

			assertEquals(null, true, storage_output.getTask(1).addLabel("label7"));
			assertEquals(null, true, storage_output.getTask(1).deleteLabel("label1"));
			assertEquals(null, false, storage_output.getTask(1).addLabel("label2"));
			assertEquals(null, false, storage_output.getTask(1).deleteLabel("label8"));
			storage.changeFileName("testFile9_AddDeleteLabel.txt");
			storage.saveToDisk();
		}

	}

	@Test
	public void testMaxID() {
		DonStorage storage = new DonStorage();

		storage.changeFileName("testFile8.txt");
		storage.clear();
		if (storage.loadFromDisk()) {
			Random ran = new Random();
			for (int i = 0; i < 1100; i++) {
				IDonTask task = new DonTask("something", storage.getNextID());
				assertEquals(null, i + 1, storage.addTask(task));
			}
			for (int i = 0; i < 100; i++) {
				assertEquals(null, true,
						storage.removeTask(ran.nextInt(9) + i * 10 + 1));
			}
			for (int i = 0; i < 800; i++) {
				IDonTask task = new DonTask("something", storage.getNextID());
				storage.addTask(task);
			}
		}
		storage.saveToDisk();
	}

}

	// End of segment: F:\My Documents\DoorNot\main\test\doornot\storage\DonStorageTester.java





